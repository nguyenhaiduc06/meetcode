export const problem = {
  __typename: "QuestionNode",
  questionId: "1",
  title: "Two Sum",
  difficulty: "Easy",
  likes: 46087,
  dislikes: 1499,
  isLiked: null,
  isPaidOnly: false,
  stats:
    '{"totalAccepted": "9.6M", "totalSubmission": "19.2M", "totalAcceptedRaw": 9595699, "totalSubmissionRaw": 19247394, "acRate": "49.9%"}',
  status: null,
  content:
    '<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class="example">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class="example">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class="example">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than&nbsp;<code>O(n<sup>2</sup>)&nbsp;</code>time complexity?',
  topicTags: [
    { __typename: "TopicTagNode", name: "Array" },
    { __typename: "TopicTagNode", name: "Hash Table" },
  ],
  codeSnippets: [
    {
      __typename: "CodeSnippetNode",
      lang: "C++",
      langSlug: "cpp",
      code: "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Java",
      langSlug: "java",
      code: "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Python",
      langSlug: "python",
      code: 'class Solution(object):\n    def twoSum(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        """\n        ',
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Python3",
      langSlug: "python3",
      code: "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        ",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "C",
      langSlug: "c",
      code: "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n\n}",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "C#",
      langSlug: "csharp",
      code: "public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "JavaScript",
      langSlug: "javascript",
      code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Ruby",
      langSlug: "ruby",
      code: "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Swift",
      langSlug: "swift",
      code: "class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Go",
      langSlug: "golang",
      code: "func twoSum(nums []int, target int) []int {\n    \n}",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Scala",
      langSlug: "scala",
      code: "object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Kotlin",
      langSlug: "kotlin",
      code: "class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Rust",
      langSlug: "rust",
      code: "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "PHP",
      langSlug: "php",
      code: "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "TypeScript",
      langSlug: "typescript",
      code: "function twoSum(nums: number[], target: number): number[] {\n\n};",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Racket",
      langSlug: "racket",
      code: "(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Erlang",
      langSlug: "erlang",
      code: "-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  .",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Elixir",
      langSlug: "elixir",
      code: "defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n\n  end\nend",
    },
    {
      __typename: "CodeSnippetNode",
      lang: "Dart",
      langSlug: "dart",
      code: "class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n\n  }\n}",
    },
  ],
  sampleTestCase: "[2,7,11,15]\n9",
};

export const problems = [
  {
    __typename: "QuestionNode",
    questionId: "1",
    acRate: 49.85453380340136,
    difficulty: "Easy",
    freqBar: null,
    likes: 46087,
    dislikes: 1499,
    frontendQuestionId: "1",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Two Sum",
    titleSlug: "two-sum",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "2",
    acRate: 40.49712919435598,
    difficulty: "Medium",
    freqBar: null,
    likes: 25778,
    dislikes: 4994,
    frontendQuestionId: "2",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Add Two Numbers",
    titleSlug: "add-two-numbers",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Linked List",
        id: "VG9waWNUYWdOb2RlOjc=",
        slug: "linked-list",
      },
      {
        __typename: "TopicTagNode",
        name: "Math",
        id: "VG9waWNUYWdOb2RlOjg=",
        slug: "math",
      },
      {
        __typename: "TopicTagNode",
        name: "Recursion",
        id: "VG9waWNUYWdOb2RlOjMx",
        slug: "recursion",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "3",
    acRate: 33.84669490676258,
    difficulty: "Medium",
    freqBar: null,
    likes: 33810,
    dislikes: 1473,
    frontendQuestionId: "3",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Longest Substring Without Repeating Characters",
    titleSlug: "longest-substring-without-repeating-characters",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Sliding Window",
        id: "VG9waWNUYWdOb2RlOjU1ODIx",
        slug: "sliding-window",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "4",
    acRate: 36.41453433811811,
    difficulty: "Hard",
    freqBar: null,
    likes: 23336,
    dislikes: 2620,
    frontendQuestionId: "4",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Median of Two Sorted Arrays",
    titleSlug: "median-of-two-sorted-arrays",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Binary Search",
        id: "VG9waWNUYWdOb2RlOjEx",
        slug: "binary-search",
      },
      {
        __typename: "TopicTagNode",
        name: "Divide and Conquer",
        id: "VG9waWNUYWdOb2RlOjEy",
        slug: "divide-and-conquer",
      },
    ],
    hasSolution: false,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "5",
    acRate: 32.43220141267485,
    difficulty: "Medium",
    freqBar: null,
    likes: 25040,
    dislikes: 1472,
    frontendQuestionId: "5",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Longest Palindromic Substring",
    titleSlug: "longest-palindromic-substring",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Dynamic Programming",
        id: "VG9waWNUYWdOb2RlOjEz",
        slug: "dynamic-programming",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "6",
    acRate: 45.047889427083355,
    difficulty: "Medium",
    freqBar: null,
    likes: 6114,
    dislikes: 12221,
    frontendQuestionId: "6",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Zigzag Conversion",
    titleSlug: "zigzag-conversion",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "7",
    acRate: 27.511144098260736,
    difficulty: "Medium",
    freqBar: null,
    likes: 10512,
    dislikes: 12092,
    frontendQuestionId: "7",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Reverse Integer",
    titleSlug: "reverse-integer",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Math",
        id: "VG9waWNUYWdOb2RlOjg=",
        slug: "math",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "8",
    acRate: 16.631826829118175,
    difficulty: "Medium",
    freqBar: null,
    likes: 3236,
    dislikes: 9923,
    frontendQuestionId: "8",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "String to Integer (atoi)",
    titleSlug: "string-to-integer-atoi",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "9",
    acRate: 53.68728802855644,
    difficulty: "Easy",
    freqBar: null,
    likes: 9524,
    dislikes: 2496,
    frontendQuestionId: "9",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Palindrome Number",
    titleSlug: "palindrome-number",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Math",
        id: "VG9waWNUYWdOb2RlOjg=",
        slug: "math",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "10",
    acRate: 28.012604132036458,
    difficulty: "Hard",
    freqBar: null,
    likes: 10576,
    dislikes: 1740,
    frontendQuestionId: "10",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Regular Expression Matching",
    titleSlug: "regular-expression-matching",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Dynamic Programming",
        id: "VG9waWNUYWdOb2RlOjEz",
        slug: "dynamic-programming",
      },
      {
        __typename: "TopicTagNode",
        name: "Recursion",
        id: "VG9waWNUYWdOb2RlOjMx",
        slug: "recursion",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "11",
    acRate: 53.975463414735216,
    difficulty: "Medium",
    freqBar: null,
    likes: 24005,
    dislikes: 1279,
    frontendQuestionId: "11",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Container With Most Water",
    titleSlug: "container-with-most-water",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
      {
        __typename: "TopicTagNode",
        name: "Greedy",
        id: "VG9waWNUYWdOb2RlOjE3",
        slug: "greedy",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "12",
    acRate: 62.17345146603832,
    difficulty: "Medium",
    freqBar: null,
    likes: 5587,
    dislikes: 5092,
    frontendQuestionId: "12",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Integer to Roman",
    titleSlug: "integer-to-roman",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
      {
        __typename: "TopicTagNode",
        name: "Math",
        id: "VG9waWNUYWdOb2RlOjg=",
        slug: "math",
      },
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "13",
    acRate: 58.631710308669525,
    difficulty: "Easy",
    freqBar: null,
    likes: 10276,
    dislikes: 594,
    frontendQuestionId: "13",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Roman to Integer",
    titleSlug: "roman-to-integer",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
      {
        __typename: "TopicTagNode",
        name: "Math",
        id: "VG9waWNUYWdOb2RlOjg=",
        slug: "math",
      },
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "14",
    acRate: 40.93052550373658,
    difficulty: "Easy",
    freqBar: null,
    likes: 13747,
    dislikes: 3919,
    frontendQuestionId: "14",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Longest Common Prefix",
    titleSlug: "longest-common-prefix",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Trie",
        id: "VG9waWNUYWdOb2RlOjI3",
        slug: "trie",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "15",
    acRate: 32.664622471726965,
    difficulty: "Medium",
    freqBar: null,
    likes: 25512,
    dislikes: 2302,
    frontendQuestionId: "15",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "3Sum",
    titleSlug: "3sum",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
      {
        __typename: "TopicTagNode",
        name: "Sorting",
        id: "VG9waWNUYWdOb2RlOjYxMDQ5",
        slug: "sorting",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "16",
    acRate: 45.667700393657576,
    difficulty: "Medium",
    freqBar: null,
    likes: 9116,
    dislikes: 478,
    frontendQuestionId: "16",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "3Sum Closest",
    titleSlug: "3sum-closest",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
      {
        __typename: "TopicTagNode",
        name: "Sorting",
        id: "VG9waWNUYWdOb2RlOjYxMDQ5",
        slug: "sorting",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "17",
    acRate: 56.759470122440945,
    difficulty: "Medium",
    freqBar: null,
    likes: 14916,
    dislikes: 839,
    frontendQuestionId: "17",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Letter Combinations of a Phone Number",
    titleSlug: "letter-combinations-of-a-phone-number",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Backtracking",
        id: "VG9waWNUYWdOb2RlOjE0",
        slug: "backtracking",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "18",
    acRate: 35.860954707597074,
    difficulty: "Medium",
    freqBar: null,
    likes: 9224,
    dislikes: 1090,
    frontendQuestionId: "18",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "4Sum",
    titleSlug: "4sum",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
      {
        __typename: "TopicTagNode",
        name: "Sorting",
        id: "VG9waWNUYWdOb2RlOjYxMDQ5",
        slug: "sorting",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "19",
    acRate: 41.317963159067475,
    difficulty: "Medium",
    freqBar: null,
    likes: 15595,
    dislikes: 656,
    frontendQuestionId: "19",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Remove Nth Node From End of List",
    titleSlug: "remove-nth-node-from-end-of-list",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Linked List",
        id: "VG9waWNUYWdOb2RlOjc=",
        slug: "linked-list",
      },
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "20",
    acRate: 40.43455001902013,
    difficulty: "Easy",
    freqBar: null,
    likes: 19751,
    dislikes: 1170,
    frontendQuestionId: "20",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Valid Parentheses",
    titleSlug: "valid-parentheses",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Stack",
        id: "VG9waWNUYWdOb2RlOjE1",
        slug: "stack",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "21",
    acRate: 62.65595654784598,
    difficulty: "Easy",
    freqBar: null,
    likes: 18190,
    dislikes: 1700,
    frontendQuestionId: "21",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Merge Two Sorted Lists",
    titleSlug: "merge-two-sorted-lists",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Linked List",
        id: "VG9waWNUYWdOb2RlOjc=",
        slug: "linked-list",
      },
      {
        __typename: "TopicTagNode",
        name: "Recursion",
        id: "VG9waWNUYWdOb2RlOjMx",
        slug: "recursion",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "22",
    acRate: 72.65379436553594,
    difficulty: "Medium",
    freqBar: null,
    likes: 17831,
    dislikes: 722,
    frontendQuestionId: "22",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Generate Parentheses",
    titleSlug: "generate-parentheses",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Dynamic Programming",
        id: "VG9waWNUYWdOb2RlOjEz",
        slug: "dynamic-programming",
      },
      {
        __typename: "TopicTagNode",
        name: "Backtracking",
        id: "VG9waWNUYWdOb2RlOjE0",
        slug: "backtracking",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "23",
    acRate: 49.9876292680175,
    difficulty: "Hard",
    freqBar: null,
    likes: 16953,
    dislikes: 617,
    frontendQuestionId: "23",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Merge k Sorted Lists",
    titleSlug: "merge-k-sorted-lists",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Linked List",
        id: "VG9waWNUYWdOb2RlOjc=",
        slug: "linked-list",
      },
      {
        __typename: "TopicTagNode",
        name: "Divide and Conquer",
        id: "VG9waWNUYWdOb2RlOjEy",
        slug: "divide-and-conquer",
      },
      {
        __typename: "TopicTagNode",
        name: "Heap (Priority Queue)",
        id: "VG9waWNUYWdOb2RlOjYxMDUw",
        slug: "heap-priority-queue",
      },
      {
        __typename: "TopicTagNode",
        name: "Merge Sort",
        id: "VG9waWNUYWdOb2RlOjYxMDUx",
        slug: "merge-sort",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "24",
    acRate: 61.512670371747355,
    difficulty: "Medium",
    freqBar: null,
    likes: 9610,
    dislikes: 365,
    frontendQuestionId: "24",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Swap Nodes in Pairs",
    titleSlug: "swap-nodes-in-pairs",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Linked List",
        id: "VG9waWNUYWdOb2RlOjc=",
        slug: "linked-list",
      },
      {
        __typename: "TopicTagNode",
        name: "Recursion",
        id: "VG9waWNUYWdOb2RlOjMx",
        slug: "recursion",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "25",
    acRate: 54.9280343716434,
    difficulty: "Hard",
    freqBar: null,
    likes: 11008,
    dislikes: 573,
    frontendQuestionId: "25",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Reverse Nodes in k-Group",
    titleSlug: "reverse-nodes-in-k-group",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Linked List",
        id: "VG9waWNUYWdOb2RlOjc=",
        slug: "linked-list",
      },
      {
        __typename: "TopicTagNode",
        name: "Recursion",
        id: "VG9waWNUYWdOb2RlOjMx",
        slug: "recursion",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "26",
    acRate: 51.775382033338325,
    difficulty: "Easy",
    freqBar: null,
    likes: 10846,
    dislikes: 14642,
    frontendQuestionId: "26",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Remove Duplicates from Sorted Array",
    titleSlug: "remove-duplicates-from-sorted-array",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "27",
    acRate: 53.252912634527604,
    difficulty: "Easy",
    freqBar: null,
    likes: 5705,
    dislikes: 7619,
    frontendQuestionId: "27",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Remove Element",
    titleSlug: "remove-element",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "28",
    acRate: 39.340498485407274,
    difficulty: "Easy",
    freqBar: null,
    likes: 3418,
    dislikes: 177,
    frontendQuestionId: "28",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Find the Index of the First Occurrence in a String",
    titleSlug: "find-the-index-of-the-first-occurrence-in-a-string",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "String Matching",
        id: "VG9waWNUYWdOb2RlOjYxMDUy",
        slug: "string-matching",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "29",
    acRate: 17.124414749210967,
    difficulty: "Medium",
    freqBar: null,
    likes: 4262,
    dislikes: 13282,
    frontendQuestionId: "29",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Divide Two Integers",
    titleSlug: "divide-two-integers",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Math",
        id: "VG9waWNUYWdOb2RlOjg=",
        slug: "math",
      },
      {
        __typename: "TopicTagNode",
        name: "Bit Manipulation",
        id: "VG9waWNUYWdOb2RlOjE5",
        slug: "bit-manipulation",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "30",
    acRate: 31.323033331280097,
    difficulty: "Hard",
    freqBar: null,
    likes: 767,
    dislikes: 54,
    frontendQuestionId: "30",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Substring with Concatenation of All Words",
    titleSlug: "substring-with-concatenation-of-all-words",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Sliding Window",
        id: "VG9waWNUYWdOb2RlOjU1ODIx",
        slug: "sliding-window",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "31",
    acRate: 37.69315003156037,
    difficulty: "Medium",
    freqBar: null,
    likes: 15147,
    dislikes: 4122,
    frontendQuestionId: "31",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Next Permutation",
    titleSlug: "next-permutation",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "32",
    acRate: 32.879649055070324,
    difficulty: "Hard",
    freqBar: null,
    likes: 10896,
    dislikes: 347,
    frontendQuestionId: "32",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Longest Valid Parentheses",
    titleSlug: "longest-valid-parentheses",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Dynamic Programming",
        id: "VG9waWNUYWdOb2RlOjEz",
        slug: "dynamic-programming",
      },
      {
        __typename: "TopicTagNode",
        name: "Stack",
        id: "VG9waWNUYWdOb2RlOjE1",
        slug: "stack",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "33",
    acRate: 39.063723178655,
    difficulty: "Medium",
    freqBar: null,
    likes: 21110,
    dislikes: 1260,
    frontendQuestionId: "33",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Search in Rotated Sorted Array",
    titleSlug: "search-in-rotated-sorted-array",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Binary Search",
        id: "VG9waWNUYWdOb2RlOjEx",
        slug: "binary-search",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "34",
    acRate: 41.9724926347533,
    difficulty: "Medium",
    freqBar: null,
    likes: 16830,
    dislikes: 405,
    frontendQuestionId: "34",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Find First and Last Position of Element in Sorted Array",
    titleSlug: "find-first-and-last-position-of-element-in-sorted-array",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Binary Search",
        id: "VG9waWNUYWdOb2RlOjEx",
        slug: "binary-search",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "35",
    acRate: 43.57846628715517,
    difficulty: "Easy",
    freqBar: null,
    likes: 13192,
    dislikes: 575,
    frontendQuestionId: "35",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Search Insert Position",
    titleSlug: "search-insert-position",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Binary Search",
        id: "VG9waWNUYWdOb2RlOjEx",
        slug: "binary-search",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "36",
    acRate: 58.20492141901645,
    difficulty: "Medium",
    freqBar: null,
    likes: 8552,
    dislikes: 903,
    frontendQuestionId: "36",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Valid Sudoku",
    titleSlug: "valid-sudoku",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
      {
        __typename: "TopicTagNode",
        name: "Matrix",
        id: "VG9waWNUYWdOb2RlOjYxMDUz",
        slug: "matrix",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "37",
    acRate: 57.93573995438729,
    difficulty: "Hard",
    freqBar: null,
    likes: 7835,
    dislikes: 207,
    frontendQuestionId: "37",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Sudoku Solver",
    titleSlug: "sudoku-solver",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
      {
        __typename: "TopicTagNode",
        name: "Backtracking",
        id: "VG9waWNUYWdOb2RlOjE0",
        slug: "backtracking",
      },
      {
        __typename: "TopicTagNode",
        name: "Matrix",
        id: "VG9waWNUYWdOb2RlOjYxMDUz",
        slug: "matrix",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "38",
    acRate: 52.31835357139527,
    difficulty: "Medium",
    freqBar: null,
    likes: 3146,
    dislikes: 6624,
    frontendQuestionId: "38",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Count and Say",
    titleSlug: "count-and-say",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "39",
    acRate: 68.79683188164019,
    difficulty: "Medium",
    freqBar: null,
    likes: 15859,
    dislikes: 316,
    frontendQuestionId: "39",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Combination Sum",
    titleSlug: "combination-sum",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Backtracking",
        id: "VG9waWNUYWdOb2RlOjE0",
        slug: "backtracking",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "40",
    acRate: 53.44371496319851,
    difficulty: "Medium",
    freqBar: null,
    likes: 8445,
    dislikes: 214,
    frontendQuestionId: "40",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Combination Sum II",
    titleSlug: "combination-sum-ii",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Backtracking",
        id: "VG9waWNUYWdOb2RlOjE0",
        slug: "backtracking",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "41",
    acRate: 36.80069570531239,
    difficulty: "Hard",
    freqBar: null,
    likes: 13875,
    dislikes: 1610,
    frontendQuestionId: "41",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "First Missing Positive",
    titleSlug: "first-missing-positive",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "42",
    acRate: 59.33028918139283,
    difficulty: "Hard",
    freqBar: null,
    likes: 26285,
    dislikes: 363,
    frontendQuestionId: "42",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Trapping Rain Water",
    titleSlug: "trapping-rain-water",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Two Pointers",
        id: "VG9waWNUYWdOb2RlOjk=",
        slug: "two-pointers",
      },
      {
        __typename: "TopicTagNode",
        name: "Dynamic Programming",
        id: "VG9waWNUYWdOb2RlOjEz",
        slug: "dynamic-programming",
      },
      {
        __typename: "TopicTagNode",
        name: "Stack",
        id: "VG9waWNUYWdOb2RlOjE1",
        slug: "stack",
      },
      {
        __typename: "TopicTagNode",
        name: "Monotonic Stack",
        id: "VG9waWNUYWdOb2RlOjYxMDU0",
        slug: "monotonic-stack",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "43",
    acRate: 39.25006220186897,
    difficulty: "Medium",
    freqBar: null,
    likes: 6156,
    dislikes: 2801,
    frontendQuestionId: "43",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Multiply Strings",
    titleSlug: "multiply-strings",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Math",
        id: "VG9waWNUYWdOb2RlOjg=",
        slug: "math",
      },
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Simulation",
        id: "VG9waWNUYWdOb2RlOjYxMDU1",
        slug: "simulation",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "44",
    acRate: 26.98422869592381,
    difficulty: "Hard",
    freqBar: null,
    likes: 6865,
    dislikes: 291,
    frontendQuestionId: "44",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Wildcard Matching",
    titleSlug: "wildcard-matching",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Dynamic Programming",
        id: "VG9waWNUYWdOb2RlOjEz",
        slug: "dynamic-programming",
      },
      {
        __typename: "TopicTagNode",
        name: "Greedy",
        id: "VG9waWNUYWdOb2RlOjE3",
        slug: "greedy",
      },
      {
        __typename: "TopicTagNode",
        name: "Recursion",
        id: "VG9waWNUYWdOb2RlOjMx",
        slug: "recursion",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "45",
    acRate: 39.89657870871156,
    difficulty: "Medium",
    freqBar: null,
    likes: 12200,
    dislikes: 425,
    frontendQuestionId: "45",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Jump Game II",
    titleSlug: "jump-game-ii",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Dynamic Programming",
        id: "VG9waWNUYWdOb2RlOjEz",
        slug: "dynamic-programming",
      },
      {
        __typename: "TopicTagNode",
        name: "Greedy",
        id: "VG9waWNUYWdOb2RlOjE3",
        slug: "greedy",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "46",
    acRate: 75.8321605174446,
    difficulty: "Medium",
    freqBar: null,
    likes: 15535,
    dislikes: 255,
    frontendQuestionId: "46",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Permutations",
    titleSlug: "permutations",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Backtracking",
        id: "VG9waWNUYWdOb2RlOjE0",
        slug: "backtracking",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "47",
    acRate: 57.48221262414125,
    difficulty: "Medium",
    freqBar: null,
    likes: 7441,
    dislikes: 130,
    frontendQuestionId: "47",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Permutations II",
    titleSlug: "permutations-ii",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Backtracking",
        id: "VG9waWNUYWdOb2RlOjE0",
        slug: "backtracking",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "48",
    acRate: 71.22275637534749,
    difficulty: "Medium",
    freqBar: null,
    likes: 14477,
    dislikes: 646,
    frontendQuestionId: "48",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Rotate Image",
    titleSlug: "rotate-image",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Math",
        id: "VG9waWNUYWdOb2RlOjg=",
        slug: "math",
      },
      {
        __typename: "TopicTagNode",
        name: "Matrix",
        id: "VG9waWNUYWdOb2RlOjYxMDUz",
        slug: "matrix",
      },
    ],
    hasSolution: true,
    hasVideoSolution: false,
  },
  {
    __typename: "QuestionNode",
    questionId: "49",
    acRate: 66.80860695791651,
    difficulty: "Medium",
    freqBar: null,
    likes: 15144,
    dislikes: 435,
    frontendQuestionId: "49",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Group Anagrams",
    titleSlug: "group-anagrams",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Array",
        id: "VG9waWNUYWdOb2RlOjU=",
        slug: "array",
      },
      {
        __typename: "TopicTagNode",
        name: "Hash Table",
        id: "VG9waWNUYWdOb2RlOjY=",
        slug: "hash-table",
      },
      {
        __typename: "TopicTagNode",
        name: "String",
        id: "VG9waWNUYWdOb2RlOjEw",
        slug: "string",
      },
      {
        __typename: "TopicTagNode",
        name: "Sorting",
        id: "VG9waWNUYWdOb2RlOjYxMDQ5",
        slug: "sorting",
      },
    ],
    hasSolution: true,
    hasVideoSolution: true,
  },
  {
    __typename: "QuestionNode",
    questionId: "50",
    acRate: 33.11488338644124,
    difficulty: "Medium",
    freqBar: null,
    likes: 7128,
    dislikes: 7398,
    frontendQuestionId: "50",
    isFavor: false,
    paidOnly: false,
    status: null,
    title: "Pow(x, n)",
    titleSlug: "powx-n",
    topicTags: [
      {
        __typename: "TopicTagNode",
        name: "Math",
        id: "VG9waWNUYWdOb2RlOjg=",
        slug: "math",
      },
      {
        __typename: "TopicTagNode",
        name: "Recursion",
        id: "VG9waWNUYWdOb2RlOjMx",
        slug: "recursion",
      },
    ],
    hasSolution: false,
    hasVideoSolution: false,
  },
];

export const studyPlans = [
  {
    __typename: "StudyPlanBriefNode",
    cover: "https://assets.leetcode.com/study_plan_v2/top-interview-150/cover",
    highlight: "Must-do List for Interview Prep",
    name: "Top Interview 150",
    onGoing: false,
    premiumOnly: false,
    questionNum: 150,
    slug: "top-interview-150",
  },
  {
    __typename: "StudyPlanBriefNode",
    cover: "https://assets.leetcode.com/study_plan_v2/leetcode-75/cover",
    highlight: "Ace Coding Interview with 75 Qs",
    name: "LeetCode 75",
    onGoing: false,
    premiumOnly: false,
    questionNum: 75,
    slug: "leetcode-75",
  },
  {
    __typename: "StudyPlanBriefNode",
    cover: "https://assets.leetcode.com/study_plan_v2/top-sql-50/cover",
    highlight: "Crack SQL Interview in 50 Qs",
    name: "SQL 50",
    onGoing: false,
    premiumOnly: false,
    questionNum: 50,
    slug: "top-sql-50",
  },
  {
    __typename: "StudyPlanBriefNode",
    cover: "https://assets.leetcode.com/study_plan_v2/premium-algo-100/cover",
    highlight: "LeetCode Staff Pick",
    name: "Premium Algo 100",
    onGoing: false,
    premiumOnly: true,
    questionNum: 100,
    slug: "premium-algo-100",
  },
  {
    __typename: "StudyPlanBriefNode",
    cover: "https://assets.leetcode.com/study_plan_v2/premium-sql-50/cover",
    highlight: "50 Advanced SQL Problems",
    name: "Advanced SQL 50",
    onGoing: false,
    premiumOnly: true,
    questionNum: 50,
    slug: "premium-sql-50",
  },
  {
    __typename: "StudyPlanBriefNode",
    cover:
      "https://assets.leetcode.com/study_plan_v2/dynamic-programming/cover",
    highlight: "10 Essential DP Patterns",
    name: "Dynamic Programming",
    onGoing: false,
    premiumOnly: false,
    questionNum: 50,
    slug: "dynamic-programming",
  },
];

export const codeInterpretResult = {
  code_answer: ["[]", "[]", "[]"],
  code_output: [],
  compare_result: "000",
  correct_answer: false,
  elapsed_time: 69,
  expected_code_answer: ["[0,1]", "[1,2]", "[0,1]"],
  expected_code_output: [],
  expected_elapsed_time: 10,
  expected_lang: "cpp",
  expected_memory: 6220000,
  expected_run_success: true,
  expected_status_code: 10,
  expected_status_runtime: "2",
  expected_std_output: ["", "", "", ""],
  expected_std_output_list: ["", "", "", ""],
  expected_task_finish_time: 1684043770247,
  expected_task_name: "judger.interprettask.Interpret",
  lang: "python3",
  memory: 16244000,
  memory_percentile: null,
  pretty_lang: "Python3",
  run_success: true,
  runtime_percentile: null,
  state: "SUCCESS",
  status_code: 10,
  status_memory: "16.2 MB",
  status_msg: "Accepted",
  status_runtime: "52 ms",
  std_output: ["", "", "", ""],
  std_output_list: ["", "", "", ""],
  submission_id: "runcode_1684046269.8637455_2V8UTRgBHa",
  task_finish_time: 1684046272121,
  task_name: "judger.runcodetask.RunCode",
  total_correct: 0,
  total_testcases: 3,
};

export const codeSubmitResult = {
  status_code: 10,
  lang: "python3",
  run_success: true,
  status_runtime: "70 ms",
  memory: 17712000,
  question_id: "1",
  elapsed_time: 89,
  compare_result: "111111111111111111111111111111111111111111111111111111111",
  code_output: "",
  std_output: "",
  last_testcase: "",
  expected_output: "",
  task_finish_time: 1684145410096,
  task_name: "judger.judgetask.Judge",
  finished: true,
  total_correct: 57,
  total_testcases: 57,
  runtime_percentile: 59.60860000000001,
  status_memory: "17.7 MB",
  memory_percentile: 9.461899999999982,
  pretty_lang: "Python3",
  submission_id: "950707886",
  status_msg: "Accepted",
  state: "SUCCESS",
};
export const codeSubmitResultFail = {
  code_output: "[]",
  compare_result: "000000000000000000000000000000000000000000000000000000000",
  elapsed_time: 87,
  expected_output: "[0,1]",
  finished: true,
  input: "[2,7,11,15]9",
  input_formatted: "[2,7,11,15], 9",
  lang: "python3",
  last_testcase: "[2,7,11,15]\\n9",
  memory: 17152000,
  memory_percentile: null,
  pretty_lang: "Python3",
  question_id: "1",
  run_success: true,
  runtime_percentile: null,
  state: "SUCCESS",
  status_code: 11,
  status_memory: "N/A",
  status_msg: "Wrong Answer",
  status_runtime: "N/A",
  std_output: "",
  submission_id: "950859238",
  task_finish_time: 1684164535257,
  task_name: "judger.judgetask.Judge",
  total_correct: 0,
  total_testcases: 57,
};

export const codeSubmitResultError = {
  code_output: "",
  compare_result: "000000000000000000000000000000000000000000000000000000000",
  elapsed_time: 17,
  expected_output: "[0,1]",
  finished: true,
  full_runtime_error: `SyntaxError: invalid syntax
^
Return i
Line 8  (Solution.py)`,
  lang: "python3",
  last_testcase: `[2,7,11,15]
9`,
  memory: 8944000,
  memory_percentile: null,
  pretty_lang: "Python3",
  question_id: "1",
  run_success: false,
  runtime_error: "Line 8: SyntaxError: invalid syntax",
  runtime_percentile: null,
  state: "SUCCESS",
  status_code: 15,
  status_memory: "N/A",
  status_msg: "Runtime Error",
  status_runtime: "N/A",
  std_output: "",
  submission_id: "950867156",
  task_finish_time: 1684165384073,
  task_name: "judger.judgetask.Judge",
  total_correct: 0,
  total_testcases: 57,
};
